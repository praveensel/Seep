To avoid overwriting the file when using `mapper.writeValue(filename, jsonNode)`, you can read the existing content of the file, merge it with the new data, and then write the updated content back to the file. Here is an example using Jackson:

1. Add Jackson dependencies to your project. If you are using Maven, add these to your `pom.xml`:

```xml
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.0</version>
</dependency>
```

2. Use the following code to merge the existing content with the new data and write it back to the file:

```java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        File file = new File("path/to/your/file.json");
        ObjectMapper mapper = new ObjectMapper();

        try {
            JsonNode newData = mapper.readTree("{\"newKey\":\"newValue\"}");

            JsonNode existingData;
            if (file.exists()) {
                existingData = mapper.readTree(file);
                // Merge existing data with new data
                ((ObjectNode) existingData).setAll((ObjectNode) newData);
            } else {
                existingData = newData;
            }

            // Write the updated data back to the file
            mapper.writeValue(file, existingData);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

In this example, the `newData` node contains the new JSON data you want to add. The existing content of the file is read, and if the file already exists, the existing content is merged with the new data. Finally, the merged content is written back to the file.

Make sure to replace `"path/to/your/file.json"` with the actual path to your JSON file.