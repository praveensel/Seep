import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Assertions;

import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class JsonNodeComparison {

    public static void compareJsonNodes(JsonNode data1, JsonNode data2) {
        // Create a set to store unique elements for each page
        Set<String> uniqueElements = new HashSet<>();

        // Iterate over the elements of the first JsonNode
        Iterator<JsonNode> elements1 = data1.elements();
        while (elements1.hasNext()) {
            JsonNode element = elements1.next();

            // Convert the JsonNode element to a String
            String elementStr = element.toString();

            // Add the element to the set
            uniqueElements.add(elementStr);
        }

        // Iterate over the elements of the second JsonNode
        Iterator<JsonNode> elements2 = data2.elements();
        while (elements2.hasNext()) {
            JsonNode element = elements2.next();

            // Convert the JsonNode element to a String
            String elementStr = element.toString();

            // Check if the element is already in the set
            // If it is, fail the test as it is a duplicate
            if (!uniqueElements.add(elementStr)) {
                Assertions.fail("Duplicate element found: " + elementStr);
            }
        }
    }

    public static void main(String[] args) {
        // Example JsonNode data for pageData1 and pageData2
        JsonNode pageData1 = createJsonNode("{\"items\": [{\"id\": 1, \"name\": \"John\"}, {\"id\": 2, \"name\": \"Jane\"}]}");
        JsonNode pageData2 = createJsonNode("{\"items\": [{\"id\": 3, \"name\": \"Alice\"}, {\"id\": 2, \"name\": \"Jane\"}]}");

        // Validate that there are no duplicates between the two pages' data
        compareJsonNodes(pageData1.get("items"), pageData2.get("items"));
    }

    // Example method to create a JsonNode from a JSON string
    private static JsonNode createJsonNode(String json) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.readTree(json);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}