import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.And;
import org.junit.Assert;

import java.io.IOException;

public class JsonResponseStepDefinitions {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private JsonNode jsonResponse;

    @Given("I have the following JSON response")
    public void iHaveTheFollowingJsonResponse(String jsonResponseString) throws IOException {
        jsonResponse = objectMapper.readTree(jsonResponseString);
    }

    @And("I validate the JSON node {string} with field {string} should be {string}")
    public void iValidateTheJsonNodeWithFieldShouldBe(String rootNodePath, String fieldName, String expectedId) throws IOException {
        validateJsonNode(jsonResponse, rootNodePath, fieldName, expectedId);
    }

    public void validateJsonNode(JsonNode rootNode, String rootNodePath, String fieldName, String expectedId) {
        JsonNode node = rootNode;

        // Navigate through the JSON tree to the specified root node
        for (String pathSegment : rootNodePath.split("\\.")) {
            node = node.path(pathSegment);
        }

        // Check if node is an array or a single object
        if (node.isArray()) {
            boolean idExists = false;
            for (JsonNode arrayElement : node) {
                if (arrayElement.path(fieldName).asText().equals(expectedId)) {
                    idExists = true;
                    break;
                }
            }
            Assert.assertTrue(fieldName + " " + expectedId + " should exist in " + rootNodePath, idExists);
        } else {
            String actualId = node.path(fieldName).asText();
            Assert.assertEquals(fieldName + " should match in " + rootNodePath, expectedId, actualId);
        }
    }
}