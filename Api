import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;

public class JsonPathFinder {

    // Public method to find paths of a given field name in the JSON structure
    public static List<String> findFieldPaths(JsonNode rootNode, String fieldName) {
        List<String> paths = new ArrayList<>();
        // Initialize the recursive search
        findFieldPathRecursive(rootNode, fieldName, "", paths);
        return paths;
    }

    // Private recursive method to traverse the JSON tree and find field paths
    private static void findFieldPathRecursive(JsonNode node, String fieldName, String currentPath, List<String> paths) {
        if (node.isObject()) {
            Iterator<Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Entry<String, JsonNode> field = fields.next();
                String fieldKey = field.getKey();
                JsonNode fieldValue = field.getValue();
                String newPath = currentPath.isEmpty() ? fieldKey : currentPath + "." + fieldKey;

                if (fieldKey.equals(fieldName)) {
                    paths.add(newPath);
                }

                // Continue the recursive search in the child node
                findFieldPathRecursive(fieldValue, fieldName, newPath, paths);
            }
        } else if (node.isArray()) {
            for (int i = 0; i < node.size(); i++) {
                JsonNode arrayElement = node.get(i);
                String newPath = currentPath + "[" + i + "]";
                // Continue the recursive search in the array element
                findFieldPathRecursive(arrayElement, fieldName, newPath, paths);
            }
        }
    }

    public static void main(String[] args) throws IOException {
        String jsonString = 
                " ";

        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode rootNode = objectMapper.readTree(jsonString);

        String fieldName = "columns";
        List<String> paths = JsonPathFinder.findFieldPaths(rootNode, fieldName);

        for (String path : paths) {
            System.out.println("Path to field '" + fieldName + "': " + path);
        }
    }
}