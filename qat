Certainly! Here are 10 more advanced Java Selenium interview questions with answers:

6. **What is the difference between implicit wait and explicit wait in Selenium WebDriver?**

   - **Implicit Wait**: It sets a global wait time for the WebDriver instance to wait for elements before throwing a `NoSuchElementException`. It is applied automatically to all findElement commands.
   
   - **Explicit Wait**: It waits for a specific condition to occur before proceeding with further execution. It is applied to specific elements with conditions like presence, visibility, or clickability, using WebDriverWait and ExpectedConditions.

7. **How do you handle dynamic elements in Selenium WebDriver?**

   Dynamic elements are those whose properties (such as IDs, classes, or attributes) change dynamically on the page. You can handle them using techniques like:
   
   - Using XPath or CSS selectors with partial attributes.
   - Waiting for specific conditions to be met using Explicit Waits.
   - Refreshing the page and retrying to locate the element.

8. **What are Actions class and Robot class in Selenium WebDriver?**

   - **Actions Class**: It provides advanced user interactions like mouse movements, double-click, drag and drop, context-click, etc., using the Actions class in Selenium WebDriver.
   
   - **Robot Class**: It simulates keyboard and mouse actions at the operating system level, useful for handling native OS pop-ups or performing keyboard shortcuts that WebDriver cannot handle directly.

9. **How do you handle pop-up windows and alerts in Selenium WebDriver?**

   Pop-up windows and alerts can be handled using the WebDriver's `Alert` interface and `switchTo().alert()` method. You can interact with alerts by accepting, dismissing, or retrieving text from them using methods like `accept()`, `dismiss()`, and `getText()`.

10. **What is headless testing in Selenium WebDriver?**

    Headless testing is a technique where tests are executed without launching a browser UI. It allows faster test execution and better integration with Continuous Integration (CI) pipelines. Headless browsers like Chrome Headless or Firefox Headless are used for this purpose.

11. **Explain the concept of TestNG annotations in Selenium testing.**

    TestNG annotations are used to control the flow of test execution and define test methods, configuration methods, and test dependencies. Some commonly used TestNG annotations include `@Test`, `@BeforeMethod`, `@AfterMethod`, `@BeforeClass`, `@AfterClass`, `@BeforeSuite`, and `@AfterSuite`.

12. **What are data-driven testing and parameterization in Selenium WebDriver?**

    Data-driven testing involves running the same test with different sets of data. Parameterization allows passing test data from external sources like Excel sheets, CSV files, or databases to test methods. TestNG's `@DataProvider` annotation is commonly used for parameterization in Selenium WebDriver.

13. **How do you perform mouse hover actions in Selenium WebDriver?**

    Mouse hover actions can be performed using the `Actions` class in Selenium WebDriver. You can use the `moveToElement()` method to move the mouse pointer to a specific element and then perform further actions like clicking on a sub-menu or capturing tooltips.

14. **What are Page Factory and Page Object Model (POM) in Selenium WebDriver?**

    - **Page Factory**: It is an extension of the Page Object Model (POM) pattern that helps initialize Page Objects in a more organized manner using annotations like `@FindBy`. It reduces boilerplate code and improves code readability and maintenance.
    
    - **Page Object Model (POM)**: It is a design pattern used to create an object repository for web UI elements. Each web page in the application is represented as a Java class, and the web elements on the page are defined as instance variables. It promotes code reusability, readability, and maintenance by separating the test code from the page-specific code.

15. **How do you handle SSL certificate errors in Selenium WebDriver?**

    SSL certificate errors can be bypassed in Selenium WebDriver by configuring the browser to accept insecure certificates. In Chrome, you can set the `--ignore-certificate-errors` flag, while in Firefox, you can set the `acceptInsecureCerts` capability to `true` in the WebDriver options. However, it's important to use this with caution, especially in production environments.